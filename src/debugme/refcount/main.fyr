
type H struct {
    value int
    slice []int
}

func dummy1() {
    // Here b must be destructed and a must be left ountouched.
    // TODO: a is needlessly zero'd, although it is not destructed.
    let a = &H{}
    let b = a   
}

func dummy2() {
    let a = H{}
    // Here no refcounting should happen
    a.slice = [1, 2]
    a.value = 2 * a.value
    let b = H{slice: [5, 6], value: 7}
    // Here a.slice must be set to zero
    let s = take(a.slice)
    s[1] = b.slice[1]
}

func dummy3() []int {
    return [1,2]
}

export func main() int {
    dummy1()
    dummy2()
    let a = dummy3()[1]
    println(a)
    return 0
}