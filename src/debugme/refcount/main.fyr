type S struct {
    value int
}

func S.f() {
    ptr.value = 84
    ptr = null
    if (ptr == null) {
        return
    }
    this.value = 42
}

func S.f2(r const ~S) {
}

var ptr *S = {}
let ptr2 *S = {}

export func main() int {
    // ptr needs locking
    ptr.f()
    ptr2.f()
    var lptr *S = {}
    let lptr2 *S = {}
    // ptr needs incref
    // lptr needs notnull
    lptr.f2(ptr)
    // lptr needs notnull
    lptr.f2(ptr2)
    // lptr needs notnull
    lptr.f2(lptr)
    lptr2.f2(lptr)
    return 0
}