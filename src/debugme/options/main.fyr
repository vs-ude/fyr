type Node struct {
    v Value
    v2 Value
    ptr *Node
    ptr2 *Value
}

type Value *Node | uint64 | int64 | double

export func main() int {
    // var v Value = <uint64>42
    var v Value = &Node{}
    if (v is uint64) {
        println("Hello int")
    }
    return <int><uint64>v
}

func foo() *Node {
    // var v Value = <uint64>42
    var v Value = &Node{}
    if (v is *Node) {
        println("Hello int")
    }
    return <*Node>v
}

func foo2() {
    // var v Value = <uint64>42
    var v Value = &Node{}
    if (v is *Node) {
        println("Hello int")
    }
}

func foo3() *Node {
    var v Value = &Node{}
    return take((<*Node>v).ptr)
}

func foo4() *Node {
    var n = &Node{}
    return take(<*Node>n.v2)
}