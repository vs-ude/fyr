import . from "<stdio.h>" {
    func puts(#const char) int
} 

import "math"
import "math/math32"

type List struct {
    value int
    next *List
}

export func main() int {
    var l *List = {value: 1}
    l.next = {value: 43}
    l.value = 42
    l = {value: 44}
    let str = printList(newList())
    puts(<#const char>str)
    return l.value
}

func newList() *List {
    return {value: 13}
}

func printList(l &List) string {
    return "Just" + " " + "kidding"
}

func gimmeString() string {
    return gimmeString() + gimmeString()
}

func cmpString(s1 string, s2 string) bool {
    return s1 == s2
}

func abs1() float {
    return math32.abs(1.2)
}

func abs2() double {
    return math.abs(1.2)
}

func length(arr [100]int) (l int, e int) {
    return len(arr), 0
}

type SomeStruct struct {
    value int
}

func SomeStruct.mul() int {
    this.value *= 2
    return this.value
}

func SomeStruct.add() int {
    this.value += 2
    return this.value
}

func SomeStruct.print() {
}

type SomeIface interface {
    func mul() int
}

type PrintIface interface {
    func print()
}

type BetterIface interface {
    extends SomeIface
    extends PrintIface
    func add() int
}

func dodo() int {
    let s *SomeStruct = {}
    let b *BetterIface = s
    if (!(b is *SomeStruct)) {
        return 0
    }
    let p ~PrintIface = b
    if (!(p is *SomeStruct)) {
        return -1
    }
    let i *SomeIface = b
    if (!(i is *SomeStruct)) {
        return -2
    }
    return i.mul()
}

type colors "red" | "green" | "yellow"

func isGreen(c colors) bool {
    return c == "green"
}