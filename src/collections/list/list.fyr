type List<T> struct {
    first *Element<T>
    last ~Element<T>
    count int
}

type Element<T> struct {
    value T
    prev ~Element<T>
    next *Element<T>
}

type Iterator<T> struct {
    element ~Element<T>
}

type ConstIterator<T> struct {
    element const ~Element<T>
}

func List.front() Iterator<T> {
    return {element: this.first}
}

func const List.constFront() ConstIterator<T> {
    return {element: this.first}
}

func List.back() Iterator<T> {
    return {element: this.last}
}

func const List.constBack() ConstIterator<T> {
    return {element: this.last}
}

func List.peekFront() copy<T> {
    return this.first.value
}

func const List.constPeekFront() const copy<T> {
    return this.first.value
}

func List.peek() copy<T> {
    return this.last.value
}

func const List.constPeek() const copy<T> {
    return this.last.value
}

func const List.size() int {
    return this.count
}

func List.clear() {
    this.last = null
    this.first = null
    this.count = 0
}

func const List.isEmpty() bool {
    return this.count == 0
}

func List.push(value T) {
    let e *Element<T> = {value: value, prev: this.last}
    let last = take(this.last)
    this.last = e
    if (last != null) {
        last.next = e
    } else if (this.first == null) {
        this.first = e
    }
    this.count++
}

func List.pop() T {
    let last = take(this.last)
    if (last == this.first) {
        this.first = null
        this.count = 0
        return take(last.value)
    }
    this.last = take(last.prev)
    this.last.next = null
    this.count--
    return take(last.value)    
}

// func List.shift(value T) {
// }

// func List.unshift() T {
// }

func List.at(pos int) copy<T> {
    var e ~Element<T> = this.first
    for(var i = 0; i < pos; i++) {
        e = e.next
    }
    return e.value
}

func List.erase(it Iterator<T>) Iterator<T> {
    if (it.element.prev == null) {
        if (it.element != this.first) {
            println("Iterator on wrong list")
        }
        if (it.element.next == null) {
            this.last = null
            this.first = null
        } else {
            this.first = take(it.element.next)
            this.first.prev = null
        }
        return {element: this.first}
    } else if (it.element.next == null) {
        if (it.element != this.last) {
            println("Iterator on wrong list")
        }
        this.last = take(it.element.prev)
        this.last.next = null
        return {}
    }
    let prev ~Element<T> = take(it.element.prev)
    let next ~Element<T> = it.element.next
    prev.next = take(it.element.next)
    next.prev = prev
    return {element: next}
}

func List.remove(it Iterator<T>) (Iterator<T>, T) {
    if (it.element.prev == null) {
        if (it.element != this.first) {
            println("Iterator on wrong list")
        }
        let e = take(this.first)
        if (it.element.next == null) {
            this.last = null
            this.first = null
        } else {
            this.first = take(it.element.next)
            this.first.prev = null
        }
        return {element: it.element}, take(e.value)
    } else if (it.element.next == null) {
        if (it.element != this.last) {
            println("Iterator on wrong list")
        }
        this.last = take(it.element.prev)
        let e = take(this.last.next)
        return {}, take(e.value)
    }
    let prev = take(it.element.prev)
    let next ~Element<T> = it.element.next
    let e = take(prev.next)
    prev.next = take(e.next)
    next.prev = prev
    return {element: next}, take(e.value)
}

// func List.concat(l &List<T>) {
func List.concat(l &List) {
    if (this.first == null) {
        this.first = take(l.first)
        this.last = take(l.last)
        return
    }
    if (l.first == null) {
        return
    }
    let e = take(l.first)
    e.prev = take(this.last)
    e.prev.next = e
    this.last = take(l.last)
}


func Iterator.next() {
    this.element = this.element.next
}

func Iterator.prev() {
    this.element = this.element.prev
}

func Iterator.value() copy<T> {
    return this.element.value
}

func const Iterator.isNull() bool {
    return this.element == null
}


func ConstIterator.next() {
    this.element = this.element.next
}

func ConstIterator.prev() {
    this.element = this.element.prev
}

func ConstIterator.value() const copy<T> {
    return this.element.value
}

func const ConstIterator.isNull() bool {
    return this.element == null
}


export func main() int {
    let l List<int> = {}
    l.push(42)
    l.push(43)
    for(let it = l.front(); !it.isNull(); it.next()) {
        println(it.value())
    }
    return 0
}