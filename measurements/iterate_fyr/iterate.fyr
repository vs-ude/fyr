import . {
    func logString(string)
    func logNumber(uint)
} from "imports"

type T struct {
    i int
    val uint
}

export func main() {
    var array [8]uint
//    for(var i = 0; array.len(); i++) {
    for(var i = 0; i < 8; i++) {
        array[i] = 100 + <uint>i
    }
    logString("Just index")
    for(var i in array[:]) {
        logNumber(<uint>i)
    }
    logString("Mixed")
    for(var c, i in array[:]) {
        logNumber(<uint>c)
        logNumber(i)
    }
    logString("Just value")
    for(var _, i in array[:]) {
        logNumber(i)
    }
    logString("Just index")
    for(var i, _ in array[:]) {
        logNumber(<uint>i)
    }
    var j int
    logString("Just index")
    for(j in array[:]) {
        logNumber(<uint>j)
    }
    var val uint
    logString("Mixed")
    for(j, val in array[:]) {
        logNumber(<uint>j)
        logNumber(val)
    }
    var t T
    logString("Just index")
    for(t.i in array[:]) {
        logNumber(<uint>t.i)
    }
    logString("Mixed")
    for(t.i, t.val in array[:]) {
        logNumber(<uint>t.i)
        logNumber(t.val)
    }
    logString("Just value")
    for(_, t.val in array[:]) {
        logNumber(t.val)
    }
    logString("Nothing")
    for(_, _ in array[:]) {
        logString(" ... peep")
    }
    logString("Nothing")
    for(_ in array[:]) {
        logString(" ... peep")
    }

//    for(var i in array) {
//        logNumber(<uint>i)
//    }
}