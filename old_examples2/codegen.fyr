type List struct {
    next *List
    value int
}

export func main() int {
    var list *List = {value: 42}
    var arr [2]List = [{}, {}]
    var tuple (List, List) = ({}, {})
    var arr2 [2]List = [{value:23, next: {}}, {}]
    var ref ~List = list
    var ref2 ~List
    ref2 = list
    var slice []List = [{}, {}]
    var refSlice ~[]List = slice
    arr[1].value = getValue(list)
    var arr3 [2]*List = [{value: 3}, {value: 5}]
    var ref3 ~List
    var ref4 ~List
    var tuple2 (*List, *List) = ({}, {})
    ref3, ref4 = tuple2
    var val1 List
    var val2 List
    val1, val2 = tuple
    var tuple3 (*List, *List) = ({}, {})
    take(tuple3)
    var list2 *List = list
    var list3 *List
    list3 = list2
    var counter = getValueByRef(list3)
    return list3.value + getLen(slice) + slice.cap() + counter + sum(&arr2)
}

func getValue(list &List) int {
    return list.value
}

func getLen(slice &[]List) int {
    return slice.len()
}

func sum(arr &[2]List) int {
    return (*arr)[0].value + (*arr)[1].value
}

func getValueByRef(list ~List) int {
    return list.value
}