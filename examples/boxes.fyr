type Point struct {
    x int
    y int
}

type Widget struct {
    sibling *Widget
}

type PointTuple struct {
    a *Point
    b *Point
}

type PointRef struct {
    p weak *Point
    p2 weak *Point
    r weak *PointRef
}

func main(param box *Point, param2 box *Point, param3 box *Point) {
    var a int = 1;
    var b int = a;
    var ptr &int = &a;

//    var p *Point = {x: 1, y: 2}
    a = param.x
    var p *Point = param
    // Must err, because p is extern because of param
//    var fuck ^Point = p
    a = p.x
    p.x = 5
    var r &Point = p
    a = r.x    
    var ptr2 &*Point = &p
    var p2 *Point = p
    // Must err because p is not initialized here
//    a = p.x
    a = r.x
    a = p2.x
    var r2 &Point = p2
    a = r2.x
    // Must err because p is not initialized here
//    p.x = 5
    // Must err because ptr2 points to a location that is not initialized
//    var ptr3 = ptr2
    p = {x: 1, y: 2}
    a = p.x
    // Must not err because ptr2 points to a location that is now initialized again
    var ptr3 = ptr2

    var w2 *Widget = {sibling: null};
    var w1 *Widget = {sibling: w2};
    // Must err, because w2 is not accessible
//    w2 == w1

    var up1 ^Point = {x: 1, y: 2}
    // Must err, because param2 is extern
//    var up2 ^Point = param2
    // Must err, because p2 is extern because of param
//    var up3 ^Point = p2
    // Works, because p was reassigned a pointer to something that is not extern
    var up4 ^Point = p

    var r4 weak *Point = up4

    var pt *PointTuple = {a: up1, b: up4}
    var upt ^PointTuple = pt

    var pr *PointRef = {p: r4}
    var upr ^PointRef = pr

    // Works. Forces pr2 and param2 into the same box
    var pr2 *PointRef = {p: param2}
//    var pr2 *PointRef = {}
//    pr2.p = param2
    // !!Must err, because pr2 is joind with param p2 and can therefore not be joined with param3.
    pr2.p2 = param3
    // Must err, because param2 and p2 can not be joined
//    var prx *PointRef = {p: param2, p: param3}

    var pr4 ^PointRef = {}
    var pr3 ^PointRef = {}
    //!! Must err, becaise it violates the isolation between pr3 and pr4
    pr3.r = pr4
}

func merge(w1 *Widget, w2 *Widget) {
    // Works, because everything belongs to the same box
    w1.sibling = w2
}

func merge2(w1 box *Widget, w2 box *Widget) {
    // Works, because everything belongs to the same box
    // TODO: Expected VariableBox where Box is
    // w1.sibling = w2
}