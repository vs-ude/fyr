type Point struct {
    x int
    y int
}

type Widget struct {
    sibling *Widget
}

type PointTuple struct {
    a *Point
    b *Point
}

type PointRef struct {
    p weak *Point
}

func main(param box *Point, param2 box *Point) {
    var a int = 1;
    var b int = a;
    var ptr &int = &a;

//    var p *Point = {x: 1, y: 2}
    a = param.x
    var p *Point = param
    a = p.x
    var r &Point = p
    a = r.x    
    var ptr2 &*Point = &p
    var p2 *Point = p
    // Must err because p is not initialized here
//    a = p.x
    a = r.x
    a = p2.x
    var r2 &Point = p2
    a = r2.x
    // Must err because p is not initialized here
//     p.x = 5
    // Must err because ptr2 points to a location that is not initialized
//    var ptr3 = ptr2
    p = {x: 1, y: 2}
    a = p.x
    // Must not err because ptr2 points to a location that is now initialized again
    var ptr3 = ptr2

    var w2 *Widget = {sibling: null};
    var w1 *Widget = {sibling: w2};
    // Must err, because w2 is not accessible
//    w2 == w1

    var up1 ^Point = {x: 1, y: 2}
//    var up2 ^Point = param2
    var up3 ^Point = p2

    var r3 weak *Point = up3

    var pt *PointTuple = {a: up1, b: up3}
    var upt ^PointTuple = pt

    var pr *PointRef = {p: r3}
    var upr ^PointRef = pr
}
