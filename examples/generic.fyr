type LinkedList<T> struct {
    next *LinkedList<T>
    value T
}

func LinkedList.setValue(x T) {
    this.value = x
}

func LinkedList.getValue() T {
    return this.value
}

type Ordinal<T> interface {
    func isLess(x T) bool
}

// func min2<V, T is int | Ordinal<V>, V>(x T, y T) T {
//     if (x < y) {
//         return x
//     }
//     return y
//}

func min<T is int8 | uint8 | int16 | uint16 | int32 | uint32 | int64 | uint64 | double | float>(x T, y T) T {
     if (x < y) {
         return x
     }
     return y
}

type Person struct {
    implements Ordinal<Person>
    firstName string
    familyName string
}

func Person.isLess(p Person) bool {
    return this.familyName < p.familyName
}

export func main() int {
    var v = min<int>(42, 94)
    var list *LinkedList<int> = &{value: v}
    list.next = &{value: 43}
    list.next.setValue(44)
    return list.value + list.next.value + list.next.getValue()
}